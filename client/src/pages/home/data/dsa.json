[
  {
    "id": "1662E",
    "url": "https://codeforces.com/problemset/problem/1662/E",
    "title": "Round Table",
    "rating": "",
    "tags": ["math"],
    "author": "",
    "platform": "Codeforces",
    "description": "There are n people, numbered from 1 to n, sitting at a round table. Person i+1 is sitting to the right of person i (with person 1 sitting to the right of person n).\n\nYou have come up with a better seating arrangement, which is given as a permutation p1,p2,…,pn. More specifically, you want to change the seats of the people so that at the end person pi+1 is sitting to the right of person pi (with person p1 sitting to the right of person pn). Notice that for each seating arrangement there are n permutations that describe it (which can be obtained by rotations).\n\nIn order to achieve that, you can swap two people sitting at adjacent places; but there is a catch: for all 1≤x≤n−1 you cannot swap person x and person x+1 (notice that you can swap person n and person 1). What is the minimum number of swaps necessary? It can be proven that any arrangement can be achieved.",
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "input_format": [
      "Each test contains multiple test cases. The first line contains an integer t (1≤t≤10000) — the number of test cases. The descriptions of the t test cases follow.",
      "The first line of each test case contains a single integer n (3≤n≤200000) — the number of people sitting at the table.",
      "The second line contains n distinct integers p1,p2,…,pn (1≤pi≤n, pi≠pj for i≠j) — the desired final order of the people around the table.",
      "The sum of the values of n over all test cases does not exceed 200000."
    ],
    "output_format": [
      "For each test case, print the minimum number of swaps necessary to achieve the desired order."
    ],
    "sample_inputs": ["y\n3\n4\n2 3 1 4\n5\n5 4 3 2 1\n7\n4 1 6 5 3 7 2\n"],
    "sample_outputs": ["y\n1\n10\n22\n"],
    "notes": [
      "In the first test case, we can swap person 4 and person 1 (who are adjacent) in the initial configuration and get the order [4,2,3,1] which is equivalent to the desired one. Hence in this case a single swap is sufficient."
    ]
  },
  {
    "id": "1660F2",
    "url": "https://codeforces.com/problemset/problem/1660/F2",
    "title": "Promising String (hard version)",
    "rating": "2100",
    "tags": ["data structures", "implementation", "math", "strings"],
    "author": "",
    "platform": "Codeforces",
    "description": "This is the hard version of Problem F. The only difference between the easy version and the hard version is the constraints.\n\nWe will call a non-empty string balanced if it contains the same number of plus and minus signs. For example: strings \"+--+\" and \"++-+--\" are balanced, and strings \"+--\", \"--\" and \"\" are not balanced.\n\nWe will call a string promising if the string can be made balanced by several (possibly zero) uses of the following operation:\n\nreplace two adjacent minus signs with one plus sign.\n\nIn particular, every balanced string is promising. However, the converse is not true: not every promising string is balanced.\n\nFor example, the string \"-+---\" is promising, because you can replace two adjacent minuses with plus and get a balanced string \"-++-\", or get another balanced string \"-+-+\".\n\nHow many non-empty substrings of the given string s are promising? Each non-empty promising substring must be counted in the answer as many times as it occurs in string s.\n\nRecall that a substring is a sequence of consecutive characters of the string. For example, for string \"+-+\" its substring are: \"+-\", \"-+\", \"+\", \"+-+\" (the string is a substring of itself) and some others. But the following strings are not its substring: \"--\", \"++\", \"-++\".",
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "input_format": [
      "The first line of the input contains an integer t (1≤t≤104) —the number of test cases in the test.",
      "Then the descriptions of test cases follow.",
      "Each test case of input data consists of two lines. The first line consists of the number n (1≤n≤2⋅105): the length of s.",
      "The second line of the test case contains the string s of length n, consisting only of characters \"+\" and \"-\".",
      "It is guaranteed that the sum of values n over all test cases does not exceed 2⋅105."
    ],
    "output_format": [
      "For each test case, print a single number: the number of the promising non-empty substrings of string s. Each non-empty promising substring must be counted in the answer as many times as it occurs in string s."
    ],
    "sample_inputs": [
      "y\n5\n3\n+-+\n5\n-+---\n4\n----\n7\n--+---+\n6\n+++---\n"
    ],
    "sample_outputs": ["y\n2\n4\n2\n7\n4\n"],
    "notes": [
      "The following are the promising substrings for the first three test cases in the example:"
    ]
  },
  {
    "id": "1660D",
    "url": "https://codeforces.com/problemset/problem/1660/D",
    "title": "Maximum Product Strikes Back",
    "rating": "1600",
    "tags": ["brute force", "implementation", "math", "two pointers"],
    "author": "",
    "platform": "Codeforces",
    "description": "You are given an array a consisting of n integers. For each i (1≤i≤n) the following inequality is true: −2≤ai≤2.\n\nYou can remove any number (possibly 0) of elements from the beginning of the array and any number (possibly 0) of elements from the end of the array. You are allowed to delete the whole array.\n\nYou need to answer the question: how many elements should be removed from the beginning of the array, and how many elements should be removed from the end of the array, so that the result will be an array whose product (multiplication) of elements is maximal. If there is more than one way to get an array with the maximum product of elements on it, you are allowed to output any of them.\n\nThe product of elements of an empty array (array of length 0) should be assumed to be 1.",
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "input_format": [
      "The first line of input data contains an integer t (1≤t≤104) —the number of test cases in the test.",
      "Then the descriptions of the input test cases follow.",
      "The first line of each test case description contains an integer n (1≤n≤2⋅105) —the length of array a.",
      "The next line contains n integers a1,a2,…,an (|ai|≤2) — elements of array a.",
      "It is guaranteed that the sum of n over all test cases does not exceed 2⋅105."
    ],
    "output_format": [
      "For each test case, output two non-negative numbers x and y (0≤x+y≤n) — such that the product (multiplication) of the array numbers, after removing x elements from the beginning and y elements from the end, is maximal.",
      "If there is more than one way to get the maximal product, it is allowed to output any of them. Consider the product of numbers on empty array to be 1."
    ],
    "sample_inputs": [
      "y\n5\n4\n1 2 -1 2\n3\n1 1 -2\n5\n2 0 -2 2 -1\n3\n-2 -1 -1\n3\n-1 -2 -2\n"
    ],
    "sample_outputs": ["y\n0 2\n3 0\n2 0\n0 1\n1 0\n"],
    "notes": [
      "In the first case, the maximal value of the product is 2. Thus, we can either delete the first three elements (obtain array [2]), or the last two and one first element (also obtain array [2]), or the last two elements (obtain array [1,2]). Thus, in the first case, the answers fit: \"3 0\", or \"1 2\", or \"0 2\".",
      "In the second case, the maximum value of the product is 1. Then we can remove all elements from the array because the value of the product on the empty array will be 1. So the answer is \"3 0\", but there are other possible answers.",
      "In the third case, we can remove the first two elements of the array. Then we get the array: [−2,2,−1]. The product of the elements of the resulting array is (−2)⋅2⋅(−1)=4. This value is the maximum possible value that can be obtained. Thus, for this case the answer is: \"2 0\"."
    ]
  }
]
